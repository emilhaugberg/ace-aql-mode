#################################################################
## Iro
################################################################
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate...
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = mysample
file_extensions []     = mysample;

contexts[] {
   main : context {
      : pattern {
         regex   \= (^(instance|schema|typeside|pragma|html|md|query|command|mapping|transform|constraints|graph|exec_jdbc|exec_js|exec_cmdline|import_csv|import_jdbc_instance))
         styles[] = .constant;
      }
      : pattern {
        regex   \= (\s*identity|literal|sql|schemaOf|typesideOf|toQuery|fromQuery|simple|chase|anonymize|frozen|unit|counit_query|counit|empty|union|coproduct|coproduct_sigma|distinct|eval|coeval|coequalize|src|dst|check|assert_consistent\s*\:)
        styles[] = .keyword;
      }
      : pattern {
         regex \= (\s*nodes|edges|entity|entities|foreign_keys|attributes|generators|equations|multi_equations|path_equations|options|functions|constants|types|imports|java_types|java_constants|java_functions\s*)
         styles[] = .name;
      }
      : pattern {
         regex \= (\s+sigma|delta|pi|lambda\s+)
         styles[] = .builtin;
      }
      : pattern {
         regex \= (\s*from|where|exists\s*)
         styles[] = .db;
      }
      : pattern {
         regex   \= (//.*)
         styles[] = .comment;
      }
      : inline_push {
         regex   \= (\")
         styles[] = .quoted;
         default_style = .quoted
         : pop {
            regex    \= (\")
            styles[]  = .quoted;
         }
      }
      : pattern {
         regex   \= (^\s*[a-z_]*\s*$)
         styles[] = .attribute;
      }

      : push {
         regex \= (\(\*)
         styles[] = .quoted;
         context[] = inside_quotes;
      }

      : pattern {
         regex \= (\s*(\w|\s)+\s*)(\:\s+)([a-zA-Z,\s]+)(\s+\-\>)(\s+[a-zA-Z,\s]+)
         styles[] = .white, .white, .white, .type, .white, .type;
      }

      : pattern {
         regex \= (\s*[a-zA-Z]*)(\s*\-\>\s*\{.*\})(,|;)
         styles[] = .type, .white, .white;
      }
   }

   inside_quotes : context {
      : pop {
         regex \= (\*\))
         styles[] = .quoted;
      }

      : inline_push {
         regex   \= (\")
         styles[] = .quoted;
         default_style = .quoted
         : pop {
            regex    \= (\")
            styles[]  = .quoted;
         }
      }
   }
}

styles[] {
   .constant : style {
      color = #6d97db
      textmate_scope = constant
      pygments_scope = Name.Constant

   }

   .keyword : style {
      color = #dbbb6d
      textmate_scope = keyword
      pygments_scope = Keyword

   }

   .name : style {
      color = #db6d6d
      textmate_scope = entity.name
      pygments_scope = Name
   }

   .attribute : style {
      color = #db6d6d
      textmate_scope = keyword.control
      pygments_scope = Keyword.Reserved
   }

   .quoted : style {
      color = #55a554
      textmate_scope = string
      pygments_scope = String
   }

   .comment : style {
      color = #adadad
      textmate_scope = comment
      pygments_scope = Comment
   }

   .db : style {
      color = #6d97db
      textmate_scope = constant.language
      pygments_scope = Operator

   }

   .builtin    : style {
      color = #88448c
      textmate_scope = keyword.operator
      pygments_scope = Name.Builtin
   }

   .white      : style  {
      color = white
      textmate_scope = text
      pygments_scope = Generic
   }

   .type       : style {
      color = #dbd87a
      textmate_scope = entity.name.class
      pygments_scope = Name.Decorator
   }
}
